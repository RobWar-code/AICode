General Program Notes

Contents
    Instruction Set Starter
    Parallel Processing Data Transfer Operations
        Parallel Performance Notes

<h1>Instruction Set Starter
Memory	          Read	        LD A, [MEM]
                  Write	        ST [MEM], A
                  Clear	        CLR [MEM]
                  Swap	        SWP A, B
Operations        Arithmetic    ADD A, B
                  Logic         AND A, B
                  Branching     JRZ 8bit Rel Address
                  Long Jump     JLRZ 16bit Rel Address
                  Carry Jump    JRC  8bit Rel Address
                  Long Carry    JRLC 16bit Rel Address 
                  Data Movement PUSH A
                  Comparison	CMP A, B
Meta-Transactions Call          CALL 8bit Address
                  Call Stored   CALL 32bit Address
                  Return        RET
Set Flags	      Implicit in arithmetic/logic

<h1>Parallel Processing Data Transfer Operations

🧠 Parallel Processing Data Transfer Strategies
1. stdio (In-Memory Streams between Processes)
Best When:

Performance is critical (low-latency, high-frequency communication)

Data size per message is moderate (< a few MBs)

Processes are tightly coordinated and run in bursts or waves

Advantages:

Very fast (RAM-based)

No disk usage

Cautions:

Requires careful handling of backpressure and process startup

Fragile if misused — needs disciplined await, drain, and exit handling

2. File Transfer (Filesystem-based I/O)
Best When:

System needs maximum stability or resilience

Data volumes are large and infrequent

Processed data needs to persist after crashes

Advantages:

Easy to debug and inspect

Low maintenance and portable

Cautions:

Much slower due to disk I/O

Accumulated file clutter must be managed

SSD wear over time for high volumes

3. Database (Local or Networked DB)
Best When:

Task coordination is complex and distributed

Data needs to be persisted, queried, or shared across unrelated processes or machines

You need auditability, traceability, or transactional safety

Advantages:

Persistent, structured, often transactional

Good for many-to-many communication and historical analysis

Cautions:

Heavier setup/maintenance

May become a bottleneck under heavy parallel load

Risk of overengineering for simple job queues

📌 Mental Model Guideline
Requirement	Use
🔄 Speed, low latency	stdio
📁 Stability, simplicity	File Transfer
🗄️ Persistence, audit	Database
⚖️ Hybrid needed	Combine: stdio + file fallback

<h2>Parallel Processing Performance Notes

The following trial was performed on or about 02/06/2025
using stdio rather than file system.

The trials were run on a pc with 6 CPU's (12 logical
CPU's).

A round covers the processing of 72 sets of trial
entities, grouped into 4 sets per process.

Number   | Rounds     | Elapsed | Rounds | Fan   |
of       | Performed  | Time    | per    | Noise |
Workers  |            |         | Hour   |       |
---------|------------|---------|--------|-------|
2        |34          | 1.049   | 34     | No    |     
3        |44          | 0.951   | 46.3   | No    |
4        |40          | 0.720   | 55.6   | No    |
5        |            |         |        | Yes   |
6        |52          | 0.664   | 78.3   | Yes   |
8        |41          | 0.604   | 67.9   | Yes   |
12       |40          | 0.473   | 84.6   | Yes   |
