Worked Examples and Strategies

Contents
    Ruleset Strategies
        General Approaches
        Possible Future Approaches
            Staged Introduction of Rules
            Allow What Evolves and Pick the Useful
        valuesSet
        valuesOutMatchInputParams

    AI Code - Example Sequences
    Toward Stepped Pathways

<h1>Ruleset Strategies

<h2>General Approaches
    Step 1) Put values in the output
    Step 2) Put a series in the output
    Step 3) Put a set of different values in the output
    Step 4) Read the input and place in the output
    Step 5) Read the input and modify in a simple way (eg: +3)
    Step 5a) input -2
    Step 5b) input *2
    Step 5c) input /2
    Step 6) Cued inputs with parameters, ie + 5 6, * 2 7

    In practice even after 20,000,000 or so trials, the system
    devolves to distributing arrangements of random numbers and 
    series in a scatter through the output area. Although the 
    introduction of breeding ranges and a output difference test
    for each execution cycle has improved the rate of change.
    There is a marked absence of systematic manipulation of the
    inputs. This might be improved by balancing the input 
    instruction distribution in favour of LDI operations. Even
    direct transfer of inputs to the output fails when tied to
    a non-zero based output block.

<h2>Possible Future Approaches

<h3>Staged Introduction of Rules
    This would involve stepping through the rules after specific
    numbers of cycles. This may encourage more concentration on 
    specific solutions and help to establish the IPO habit.

    However code patterns may well degrade to random scatter as
    new rules are introduced.

<h3>Allow What Evolves and Pick the Useful
    This approach modifies the user demands of the system, to
    one of producing interesting or useful code fragments and
    sections over an open-ended period of time.

    This approach would allow the opportunistic addition of rules
    to favour certain patterns of output, so that after a medium
    period of time, certain interesting effects would begin to
    arise.

    In this case the addition of rules to the system over time 
    should be allowed for.

    This may well require substantial development to facilitate 
    user intervention and observation.

<h2>valuesSet
    Since the primary aim is to produce out, the first rule
    is valuesSet this checks each byte of the output to see
    if a non-zero value has been set. The score is a factor
    of 1 per byte set over the tested range.

    A typical sequence of entity code required to get the 
    maximum for this rule would be:

    INC A
    STO (C), A
    INC C
    JR [0xFD]

<h2>valuesOutMatchInputParams
    This is tested for in a specific block of 8 bytes and
    specific set of input parameters, so not only must the
    operating entity discover the necessary output, but also
    the specific inputs.

<h1>AI Code - Example Sequences

1) Sequence of numbers from output position 0
    INC A                           1/56
    STO (C), A                      1/56
    INC C                           1/56
    JR 0xFD (or lower)              1/(56 * (256 - (127 - 2)))

1A) Example from AI Code
    DEC B               B:255        B:1            B:254
    STO (C), A          O(0):0       O(255):0       O(2):255
    INC A               A:1          A:1            A:0
    INC A               A:2          A:2            A:1
    SWP A, C            A:0, C:2     A: 255:, C:2   A:2, C: 1
    SWP B, C            B:2, C:255   C:1, B:255     B:1, C:254
    JR 0x8E
 
<h1>Toward Stepped Pathways
Having tested the app as at 05/12/2025 - we find that code
entities plateau with a score of about 1/3 of the maximum
using a mixture of random number and series transfers to
output, but also a degree of reading from the input.

These scores were achieved after about 80 million trials
and scoring progress was very slow indeed at this point.

The most likely account for this is that further improvement
would require very low probability events in the breed/mutate
cycle.

Here, we consider stepped pathways, in which no progressive
step has a probability lower than a certain threshold.

So let us consider some sequences.

Firstly consider

LDI A, (C) // LD A from the input buffer
STO (C), A // ST A in the output buffer
INC C 
JR 0xFC // Jump relative back to start

Using the rule sets, this scores on valuesSet, outputFromInitialParams, outputMatchesInitialParams
