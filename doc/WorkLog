Work Log
Contents
    Jobs Due
    Jobs Done

Jobs Due
    * = completed and tested
    + = completed not tested

    Possibly include duplication in monoclonal breed mutations

    Update the README with the current system definition

    Check through code sequences to establish stepwise rules

    Pass ExecutionCycle to the rulesets getScore method to trigger some rules

    Export and Load JSON tables

    Do further analysis of scale of modifications to existing entity solutions
    
    + Add a completion of all rules procedure. Untested

    Separate the display cycle data from the display entity data
    and then combine them in the main program entityDisplay rather
    than passing them as parameters to the entity object function.

    Consider separating out the rule/seed option functions
    into their own module from the main control object, rather
    than repeating the functions in the serial and parallel
    modules.

    Do the sort triplets seed code
    
    * Only display the input and output block divs for the
    number of parameter blocks, rather than six including
    empty blocks.

    * Update the README instruction set listing with the LDSI, LDSO instructions

    Backup the projects folder on the USB.

    Change the transfer batch in MainControlParallel to a complete set, rather than 
    individual entities

    Include save scorelist for an entity?

    Trace operation
        Close the trace window from the main window

        Include a close option on the trace window

    Apply redundant pairs to monoclonal instruction insert/replace?

    Do estimating for probabilities with samples etc.
        Allow for multiple ways to solve the same issue

    Consider why the system gets trapped in solutions so soon.

    Overcome "cheating" in which the entity simply places the test/result byte into the output block
        This might be overcome by making the tests sufficiently numerically steep?
        Threshold minimum of steps?
        Include the input argument(s) adjacent to the output result in the output data.
        See weeding below

    Weeding - removing sub-standard items from the best set

    Continue the analysis

Jobs Done
    15/04/2025

    * Resolve the hang-up problem with double click on Halt Process
    whilst processing.

    * Heap full problem after a few hours, may be to do with the
    MainProcess module. Fix for both serial and parallel operations.
        Only create the new mainProcess object at startup.
    
    * Remove the byte score reference from the instruction set.

    * Separate the main processing loop into its own module so that
    it can be shared between the parallel and serial
    processing programs.

    * Consider reintroducing the serial processing mode for the single cpu laptops.
    Which runs slightly faster than the parallel version. Put option in index.js

    * Consider dropping the transfer outputs/inputs tables as the entity programs are 
    re-executed for display now.

    * Do the greaterOfThree rule

    * Update the README with the batch transfer tables

    * Do a sort rule

    * Do the lists of rule sample data for access by the entity programs

    * Provide the LDSI A, (C) and LDSO A, (C) instructions

    * Check the transfer of sample data for use by the sample instructions

    * Clear all of the tables and re-start trials with the LDSI and LDSO instructions

    9/4/2025

    * Update the README with the parallel batch processing details

    * Possibly set numCPUs to a maximum of 4, test on widows laptop, which allows for 8
    and is currently operating at 10 rounds per hour.
    
    * Problem with display score list - load seed operation - seed display
        * Problem with display score list - general operation, possibly after load seed operation problem

    * Problem with rule score in divide param ops. Auto fixed.

    * Check user interface during batch operations
        * Display selected entity
            * Check score list
        * Load seed rule
        * Load seed
        * Restore Rule Seed
        * Trace
        * Reconsider Halt Process
        * Select Rule

    * Display Entity - other circumstances.
        * On single rule completion
        * On end of rules

    * Prevent auto-display of entity when selection made?
        No - use Halt Process before displaying specific entity

    * Get Halt Processing working

    * Consider score list for the entity on display - how to generate.
        Save the score-list with the entity data or re-run the entity?
        Save the the score-list is a substantial data/time over-head.
        Score-list for the auto-display entity.
        * Possibly - re-execute the auto-display entity.
        Allow for the rule completion data.

    * Do the analysis for the worker app to do the processing.
        See ParallelProcessing.txt

    * Check the standalone MainControl file

    * Allow for seed rule programs in the batch processes

    * Allow for seed fragments in the batch processes

    * Do the parallel processing modifications to the MainControlParallel file
        * Write the routines for dispatching data to the workers
        * Write the routine for starting-up the processes
        * Write the routine for collecting the processed data
        * Do the end of round routine - including best set shuffle
        * Modify createTables to accommodate the transfer_entity table
        * Allow for breed method in entity transfer details
        * Collect batch data (ie: breed counts and cycleCounter)
        * Sort-out Score History (end of span functions)
        * Tidy-up the functions (remove redundant functions)
        * check entityNumber and cycleCounter for spawn operation
        * bestSetEntityNum returned to main not valid -1
        * currentCycle returned to main is NaN
        * interbreedFlagged breeds is NaN
        * Entity outputData is missing
        * Entity inputData is missing
        * Message the main window once the batch is dispatched
        * Message the main window once the batch has been processed
        * Include entity registers in the transfer table

    * Do the workerApp.js modifications of the MainControl
        * Main Program Section
        * Fetch best sets
        * Process Loop
        * Transmit completed best sets
        * Set-up batch data table
        * Transmit breed counts - batch data 
        * Remove Redundant Functions
        * Check use of roundNum in Entity

    * Integrate the parallel processing module in index.js

    * Max Score not set

    * Allow for elapsed time in batch processing

    * Remove Test Monoclonal

    26/03/2025
    
    * Consider which rules need highIP and highIC set

    * Rule function to check the degree of similarity between the scores
    for outputs on the current rule

    * Modify valuesOutSet to score only in the range of the current required output
        Set the opt to the number of non-zero outputs

    * Introduce an extracted fragments function for monoclonalInsBreed, that
        obtains common code fragments from the seed rules each time that
        the seed rules are updated.
        This will have to be a partial scan, as exhaustive scanning would
        be too process intensive/time consuming.

        Suggested is to take 50 samples at random from the source seed rule program,
        and parse each against the existing seed rules for matches. The samples should
        be between 3 and 14 instructions in length.

        Update the README

    * Save and load the completion round for each rule

    19/03/2025
    
    * Check the completion round data for rules

    * Add the completion round data for rules to the database

    * Load/Save rule completion rounds

    * Separate the scorelist rule scores from the score data
    
    * Use predefined expected score outputs for scoring.

    * Consider adjusting scoreOutputDiff so that it actually
    counts the number of differences between the required outputs
    and uses this for the optimum.

    * Re-introduce/modify the scoreOutputDiff rule
        * Allow for the current rule sequence num to get the
        outputBlockLength.

        * When calculating the max score, allow for the diffScore

        * Allow for the scoreOutputDiff rule to be run in the
        same loop as the rest of the scores.

        * Remove the original scoreOutputDiff call.

    * Problem with insert from load seed rule - probably entity rule sequence num

    * Add subtract adjacent params seed program

    * Possibly problem with rule multiply by adjacent param

    01/03/2025
    
    * Display the score and the execution count on trace window

    * Include a cancel button the trace select execution count panel

    * Jump to execution cycle on trace window

    * On run selected rule, display "processing" from start

    * On the trace display, ensure the ruleset parameters are displayed.

    * Precede the divideBy rules by moduloFirstParam
    
    * Include code fragments in the instruction set class and
    insert them via random breed and monoclonalInsBreed
        Include note on this in the README

    * Re-incorporate the optimum instruction counter rule

    * Fix display to allow for removal of fields without data

    * Fix current max score to allow for number of rule param blocks

    * Allow for more than two input parameter blocks in the rules
        * Adjust the entity execute number of execution cycles
        to the number of input parameter blocks.

        * Adjust the main display to accomodate upto 6 input parameter
        blocks

        * Adjust the display routines to accommodate the input parameter
        blocks

    * Include the mainLoop actions in a loop, to improve processing times

    * Include a cancel option button for the load options.

    * Consider the facility of adding code rules and still using the saved
    entities to resume. Note that the seed rule ID (name) would have to
    be saved with the seed rule, and this would have to be recorded
    in the list of seed programs.

    * Add rules 
        * subtractFirstParam
        * mutiplyByFirstParam
        * divideByFirstParam
        * greaterThanFirstParam
        * compareFirstParam

        * Withdraw the rules with "ghost" parameters

        Remove the surplus rule functions

    * Add the rules:
        * paramsPlusN (n = 3, n = 6)
        * paramsPlusN (n = 3, n = 6)
        * paramsTimesN (n = 2, n = 6)

    * Add the instructions
        * JRNZ
        * JRNC

    * Make all the rules use output from address 0 and input from address 0

    * Fix the paramsGreaterThanN issue -
        This appears to have been caused by the program entities' use of the LD A, R
        operation to obtain an output value that is, apparently, different in the
        load seed rule operation, to the standard execute operation.

        Have changed the rule to provide < = > values as output. Yet to be proved.

        The problem persists - perhaps it has something to do with the rule implementation,
        seeing that other seed rule operations appear to work well.


    18/02/2025

    * Add a Cancel Load Seed button

    * Add a Cancel Load Seed Rule button

    * Add a Cancel Select Rule button

    * Add the rule paramsCompareN
    
    * Add shift left SL A and shift right SR A

    * Pass the rule sequence num for seed rules to the execute (entity and instruction)
    functions and from there to the getOutputByteScore function.

    * Fix the save/load seed rules
    
    * Tidy-up rule descriptions

    * Allow for the selection of a rule to run in isolation.

    * Allow for input parameters associated with a rule (to be passed to the entities)

    * Change Divide Inputs

    * Remove LD A, R, LD A, S instructions as these produce results outside of the direct
        causality of the programs.

    08/02/2025

    * Add interbreedInsMerge breed method

    * Add duplicate input params rule

    * Add add first param to params rule
    
    * Add add second param rule

    * Add duplicate instruction/byte to monoclonal breeding

    * Add transpose instruction/byte to monoclonal breeding

    * Clear seed selector when processing resumed

    * Halt the process when seed rule option selected

    * Fix Display of Rule Description in seed program display

    * Fix seed program selector

    * Add skip adjacent param 1 rule (first byte)

    * Add the skip adjacent params rule

    * Add the swap adjacent params rule

    * Add the add adjacent params rule

    * Add the subtract the adjacent params rule

    * Set the rule output positions to the same for each rule

    * Allow for load and inspect completed solutions (seed rules)

    * Save the completed solutions.

    * When using seed rules, select at random from the set of completed
    solutions

    31/01/25
    
    * Do one rule at a time, replacing the rule by the next,
    * using the previous result as the seed for the next.
        * Modify the ruleset getScore to use only retained and the current rule

        * Save the initialMemSpace and ruleNum of the threshold entity in rulesets
        
        * Set flag to indicate that the threshold has been reached

        * In the main loop check for threshold reached, 
        when the threshold is reached, clear down all best sets.

        * In the main loop save operation, include the ruleset ruleSequenceNum, and seedRuleMemSpace

        * When calling the new entity in the process loop, use the flag to 
        indicate using the threshold entity memSpace.

        * In the general load operation, include the ruleSequenceNum and seedRuleMemSpace

        * Include seedRuleBreedCount on display

        * Include ruleSequenceNum on display

        * Update byte rule score, allowing for thresholds and retained rules

    * Rationalise the byte scores for hits and near hits
        chose 0 for hit, 255 for miss since relative
        scoring leads to a cheat.

    * Remove insert lower score into tables

    23/01/2025
    
    * Add the rule to convert ASCII numbers
       * Write test scripts fro the functions

    * Fix the elapsed time indicator - problem when entity selected.

    * Change the page font size to 13px.

    * On the clearance pass eliminate cases of more than three items whose
    output values are the same.

    * Only count in interbreedFlagged instructions if they are not no-ops.
        This overcomes the problem of executing all instructions with
        the cheat of using no-ops.

    * Transmit key globals to the renderer at start-up

    * On the step execute operation for trace allow for the score/end of program

    * On the trace window allow for auto step on/off and a speed control

    * Add a trace restart button

    * Add score for loop back code that is actually used.

    * Remove the existing testScript functions and hooks from entity.js
    * Remove the existing testScript function hooks from instructionSet

    19/01/2025
    
    * Remove duplicate best sets when scores match at clearnance cycle.

    * Introduce a score for the number of reverse jump JR instructions

    * Adjust scoring (x/(max - opt) and x/(opt - min))

    Introduce a score for the number of different instructions actually executed

    * Round off the scores in the score list

    * Use an exponential scoring system to encourage specialisation
        This worsens results so withdraw

    * Modify the rulesets to pass the rule list object to the functions
    in a loop

    * Bear in mind the current setting for numRounds im mainControl

    * Add InterbreedFlagged - for flagged code segment interchange

    * Add the = a b rule in the rule set

    * Flatten the scoring 

    * Prove the insert seed operation

    13/01/2025

    * Introduce byte level mutatiaons for monoclonal breeding

    * Update Windows System
        * Recreate tables on windows system

    * Introduce rules one at a time from number of rounds
        Problem with same score each round? breed? entity repeated?

    * On main display show number of rounds

    * Load with execute to adjust scores to the prevailing environment
    
    * Indicate actual number of cross-set breeds

    * Adjust height of code display on main window - make scrollable

    * Reduce the line spacing of titles on the main display

    * Reset the trace button when the trace window is closed

    * Score the difference between the outputs from the execution runs

    * Regionalise interset breeding
    
    * Work-on and modify the rulesets
        * Use consistent i/o data blocks

    * Update the instruction set in the README
    
    * Figure out the necessary procedures for git pull on the windows system
       * Re-copy the src directory.

    09/01/2025

    * Adjust rule set
        * Add param minus three

    * Test Program / Seeding
        * Do the analysis for test scripting and seeding in the README.
        * Make the necessary modifications to index.html
        * Write the seedPrograms.js object
        * Do score list
        * Do Trace interface connection
        * On restart processing, rebuild the best set entity display
        * Do the insert seed into best set operation

    * Use git to update the windows system (rulesets.js)

    * Do the git update for the new rule and send to the other computer

    * Include a rule to score matching CASM instructions

    * Port to the windows laptop

    * Include auto-save and database tidy

    * Include a self-breed method that uses a copy of the final memspace

    * Save/Load Procedures
        Hook Electron upto MySql

    29/12/2024
    
    * Every 1000 cycles restart the lowest half of the bestSets

    * Checkout the interbreed operation
    
    * Add a R S registers to get the result of scores of output bytes
        * Do analysis of this in README
        * Do the ruleset functions etc.
        * Add the LD A, R and LD A, S instructions to the instruction set
        * Do the ruleset tests

    * Add rules using the op a b approach for +-*
        * Update the initial parameters
        * Write the op code rules
        * Write the byte test rules
        * Write the test scripts

    26/12/2024
    * Add additional instructions to load and save the B, C registers

    * Increase the number of best set to 24 
    
    * Decrease the number of entities per best set to 40

    * Write-up the procedures and layout for the trace program option

    * Problem with valuesOut
        * Add a LD A, IMM instruction
        * Write code insert operation to test the instructions

    * On-display step through code

    * Code the trace operation

        * Do the transmission to the trace object

        * Do the main trace object

        * Do the trace step event

        * Include borders around data

        * Consider smaller instruction list divs

        * Register display on one line


    * Adjust the stack pointer to the end of the memory area

    * Include score history

    * Show the first pass params block as well as the second
        * Arrange the params and outputs one above the other
        
    * List the input parameters in blocks of eight as for the outputs

    * Check that ADD A, B overflows

    * Allow for register memory addressing

    13/12/2024
    * Entity Display Selector not working

    * Figure how to prevent processing continuing another lap after halt clicked

    * Include Elapsed time on main screen

    * Display of cross-breed column incorrect

    * Allow for more random creations

    * Extend the test output fields to 8 bytes

    * Check scoring of initial params

    * Display the values out for each pass of the entity execution

    09/12/2024
    
    * Add a mainLoop that selects from a choice of best sets for processing.
        * Define the best sets in the MainControl
        * Adjust the code to deal with the chosen best set
        Add a facility to select the best set on the main screen

    * Include and display counters for the breed types

    * Include the CASM instruction for the call to label.
        * Adjust the length of SM to 2 (1 data label byte)

    07/12/2024
    
    * Arrange the input parameters and output block into separate blocks of
    256 bytes.
        * Adjust the instruction set to accommodate the new arrangement.
        
    * Allow for fixed length block interbreeding

    06/12/2024
    * Give the entities two or more sets of parameters for the same problem type
        * Entity Processing
        * Entity Display
        * Scoring

    03/12/2024

    * Document Test Scripts in ReadMe

    * Define the Instruction Set class
        Consider how the CFAR operation will be implemented
        Consider how the return data from CFAR should be handled

    * Define the minimum code to implement entities and execute them with a timer
        This delivers about 2500 entity evaluations per second

    * An undefined code sometimes gets in the memSpace - resolve.
    
    * Display entity - include score.
        * Repeating entry?

    * Add entities to best set - needs testing

    * Display entity from best set

    * Define the initial rulesets

    * Define the breeding procedures
        * Random Generation
        * Monoclonal
            Need triggering point in entity?
        * Interbreed

    * Allow for a fixed input parameter set to cover for multiple tests in the initial run
